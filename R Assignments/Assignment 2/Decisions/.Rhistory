l <- lapply(c, mean)
class(l)
l
l <- list(a = 1:10, b = 11:20)
sapply(l, mean)
class(sapply(l, mean))
typeof(sapply(l, mean))
meansapply(l, mean)
sapply(l, mean)
l <- list(a = 1:10, b = 11:20)
l.fivenum <- vapply(l, fivenum, c("1st Qu." = 0, Min. = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
l.fivenum
replicate(3, "Banana")
rnorm(5)
replicate(3, rnorm(5))
class(replicate(3, "Banana"))
l <- list(a = 1:10, b = 11:20)
rapply(l, function(x) x*x)
rapply(l, function(x) x*x, how = "list")
attach(iris)
head(iris, 4)
by(iris[, 1:4], Species, colMeans)
iris
e <- new.env()
e$a <- 1:10
e$b <- rnorm(10)
eapply(e, mean)
l <- lapply(c, mean)
l
class(l)
l <- list(a = 1:10, b=11:20)
sapply(l, mean)
class(sapply(l, mean))
typeof(sapply(l, mean))
tapply(iris$Petal.Length, Species, mean)
by(iris$Petal.Length, Species, mean)
tapply(iris$Petal.Length, Species, mean)
res2 <-
res1 <- tapply(iris$Petal.Length, Species, mean)
res2 <- by(iris$Petal.Length, Species, mean)
class(res1)
class(res2)
typeof(res1)
typeof(res2)
theMatrix <- matrix(1:9, nrow = 3)
theMatrix
apply(theMatrix, 1, sum)
apply(theMatrix, 2, sum)
rowSums(theMatrix)
colSums(theMatrix)
theMatrix[2,1] <- NA
theMatrix
apply(theMatrix, 1, sum)
apply(theMatrix, 1, sum, na.rm = T)
rowSums(theMatrix, na.rm = T)
theList <- list(A = matrix(1:9, 3), B = 1:5, c = matrix(1:4, 2), D = 2)
theList
lapply(theList, sum)
sapply(theList, sum)
theNames <- ("Jared", "Deb", "Paul")
theNames <- c("Jared", "Deb", "Paul")
theNames
lapply(theNames, nchar)
res <- sapply(theNames, nchar)
res$Jared
res[1]
firstList <- list(A = matrix(1:16, 4), B = matrix(1:16, 2), c = 1:5)
secondList <- list(A = matrix(1:16, 4), B = matrix(1:16, 8), c = 15:1)
mapply(identical, firstList, secondList)
mapply(identical, firstList, secondList, thirdList)
thirdList <- list(A = matrix(1:16, 4), B = matrix(1:16, 8), C = 1:5)
mapply(identical, firstList, secondList, thirdList)
secondList <- list(A = matrix(1:16, 4), B = matrix(1:16, 8))
mapply(identical, firstList, secondList)
mapply(identical, firstList, secondList, thirdList)
, c = 15:1
secondList <- list(A = matrix(1:16, 4), B = matrix(1:16, 8), c = 15:1)
mapply(identical, firstList, secondList)
mapply(identical, firstList, secondList, thirdList)
a <- c(2, 3, 4, 5)
a <- c(2, 3, 2, 5)
b <- c(2, 7)
mapply(identical, a, b)
simpleFunc <- function(x, y)
{
NROW(x) + NROW(y)
}
mapply(simpleFunc, firstList, secondList)
data(diamonds, package = "ggplot2")
head(diamonds, 3)
data(diamonds)
attach("ggplot2")
attach(ggplot2)
install.packages("ggplot2")
data(diamonds, package = "ggplot2")
head(diamonds, 3)
data(diamonds)
library("ggplot2")
data(diamonds, package = "ggplot2")
head(diamonds, 3)
data(diamonds)
data(diamonds)
aggregate(price-cut, diamonds, mean)
aggregate(price~cut, diamonds, mean)
aggregate(price~cut + color, diamonds, mean)
aggregate(price~color + cut, diamonds, mean)
aggregate(price~cut, diamonds, mean)
aggregate(carat~cut, diamonds, mean)
aggregate(cbind(price, carat) ~ cut, diamonds, mean)
aggregate(cbind(price, carat) + cut, diamonds, mean)
aggregate(cbind(price + carat) ~ cut, diamonds, mean)
aggregate(cbind(price + carat) ~ cut, diamonds, mean)   # added them... bad
aggregate(cbind(price, carat) ~ color + cut, diamonds, mean))
aggregate(cbind(price, carat) ~ color + cut, diamonds, mean)
aggregate(price, carat) ~ cut + color, diamonds, mean)
aggregate(cbind(price, carat) ~ cut + color, diamonds, mean)
library(plyr)
head(baseball, 5)
baseball
?plyr
baseball$sf[baseball$year < 1954] <- 0    # SF was not kept
any(is.na(baseball$sf))
baseball$ab
baseball50 <- baseball[baseball$ab >= 50, ]
baseball$OBP <- with(baseball, (h + bb + hbp) / (ab + bb + hbp + sf))
tail(baseball)
obp <- function(data)
{
c(OBP = with(data, sum(h + bb + hbp) / sum(ab + bb + hbp + sf)))
}
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, stemDocument, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
library("wordcloud")
set.seed(555)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, stemDocument, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
warnings()
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
other.words <- c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that")
churchill <- tm_map(churchill, removeWords, other.words)
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
trivial <- c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also")
churchill <- tm_map(churchill, removeWords, trivial)
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
library("wordcloud")
set.seed(555)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, tolower)
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
trivial <- c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also")
churchill <- tm_map(churchill, removeWords, trivial)
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
rm(list = ls())
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, tolower)
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
trivial <- c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also")
churchill <- tm_map(churchill, removeWords, trivial)
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
rm(list = ls())
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
trivial <- c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also")
churchill <- tm_map(churchill, removeWords, trivial)
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
#churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
trivial <- c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also")
churchill <- tm_map(churchill, removeWords, trivial)
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
trivial <- c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also")
churchill <- tm_map(churchill, removeWords, trivial)
dtm <- DocumentTermMatrix(churchill)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
rm(list = ls())
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
churchill <- tm_map(churchill, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, stemDocument, lazy = TRUE)
dtm <- DocumentTermMatrix(churchill)
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
churchill <- tm_map(churchill, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchill <- tm_map(churchill, stemDocument, lazy = TRUE)
churchillPTD <- tm_map(churchill, PlainTextDocument)
dtm <- DocumentTermMatrix(churchillPTD)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
library("wordcloud")
set.seed(555)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
churchill <- tm_map(churchill, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this", "with", "without", "shall", "like", "thus", "that", "also"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchillPTD <- tm_map(churchill, PlainTextDocument)
dtm <- DocumentTermMatrix(churchillPTD)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
library("wordcloud")
set.seed(555)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
churchill <- tm_map(churchill, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this",
"with", "without", "shall", "like", "thus", "that", "also", "will"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchillPTD <- tm_map(churchill, PlainTextDocument)
dtm <- DocumentTermMatrix(churchillPTD)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
library("wordcloud")
set.seed(555)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
churchill <- tm_map(churchill, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this",
"with", "without", "shall", "like", "thus", "that", "also", "will"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchillPTD <- tm_map(churchill, PlainTextDocument)
dtm <- DocumentTermMatrix(churchillPTD)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
library("wordcloud")
set.seed(555)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
barplot(freq[1:20], xlab = "Terms", ylab = "Frequency", col = heat.colors(20))
findAssocs(dtm, "war", 0.95)
findAssocs(dtm, "war", 0.95)
rm(list = ls())
library("tm")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
churchill <- VCorpus(DirSource("Churchill", encoding = "UTF-8"))
churchill <- tm_map(churchill, removePunctuation, lazy = TRUE)
churchill <- tm_map(churchill, tolower, lazy = TRUE)
churchill <- tm_map(churchill, removeWords, stopwords("english"))
churchill <- tm_map(churchill, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this",
"with", "without", "shall", "like", "thus", "that", "also", "will"))
churchill <- tm_map(churchill, stripWhitespace, lazy = TRUE)
churchillPTD <- tm_map(churchill, PlainTextDocument)
dtm <- DocumentTermMatrix(churchillPTD)
findAssocs(dtm, "war", 0.95)
findAssocs(dtm, "peace", 0.95)
findAssocs(dtm[1], "war", 0.95)
findAssocs(dtm[[1]], "war", 0.95)
findAssocs(dtm, "war", 0.95)
findAssocs(dtm, "war", 0.90)
findAssocs(dtm, c("war", "peace"), 0.50)
findAssocs(dtm, c("war", "peace"), 0.80)
findAssocs(dtm, "war", 0.75)
findAssocs(dtm, "war", 0.70)
findAssocs(dtm, "war", 0.65)
findAssocs(dtm, "war", 0.80)
findAssocs(dtm, "peace", 0.80)
rm(list = ls())
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2/Decisions")
url <- "https://www.supremecourt.gov/opinions/17pdf/16-1067_q86b.pdf"
write(getURL(url), file = "1.pdf")
library("RCurl")
url <- "https://www.supremecourt.gov/opinions/17pdf/16-1067_q86b.pdf"
write(getURL(url), file = "1.pdf")
write(getURL(url), file = "1.txt")
files <- c("1.pdf", "2.pdf", "3.pdf", "4.pdf", "5.pdf", "6.pdf", "7.pdf", "8.pdf",
"9.pdf", "10.pdf", "11.pdf", "12.pdf", "13.pdf", "14.pdf", "15.pdf", "16.pdf")
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2/Decisions")
files <- list.files(pattern = "pdf$")
Rpdf <- readPDF(control = list(text = "-layout"))
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2")
decisions <- VCorpus(DirSource("Decisions", encoding = "UTF-8"))
decisions[[1]]
decisions[[3]]
decisions[[4]]
decisions[[16]]
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2/Decisions")
files <- c("1.pdf", "2.pdf", "3.pdf", "4.pdf", "5.pdf", "6.pdf", "7.pdf", "8.pdf",
"9.pdf", "10.pdf", "11.pdf", "12.pdf", "13.pdf", "14.pdf", "15.pdf", "16.pdf")
install.packages("pdftools")
library(pdftools)
pdfs <- lapply(files, pdf_text)
decisions <- Corpus(VectorSource(opinions2))
decisions <- Corpus(VectorSource(pdfs))
decisions[[2]]
decisions <- tm_map(decisions, removePunctuation, lazy = TRUE)
decisions <- tm_map(decisions, tolower, lazy = TRUE)
decisions <- tm_map(decisions, removeWords, stopwords("english"))
#decisions <- tm_map(decisions, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this",
#                                              "with", "without", "shall", "like", "thus", "that", "also", "will"))
decisions <- tm_map(decisions, stripWhitespace, lazy = TRUE)
decisionsPTD <- tm_map(decisions, PlainTextDocument)
dtm <- DocumentTermMatrix(decisionsPTD)
highFreqTerm <- findFreqTerms(dtm, 25)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
rm(list = ls())
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2/Decisions")
files <- c("1.pdf", "2.pdf", "3.pdf", "4.pdf", "5.pdf", "6.pdf", "7.pdf", "8.pdf",
"9.pdf", "10.pdf", "11.pdf", "12.pdf", "13.pdf", "14.pdf", "15.pdf", "16.pdf")
install.packages("pdftools")
library(pdftools)
pdfs <- lapply(files, pdf_text)
decisions <- Corpus(VectorSource(pdfs))
rm(list = ls())
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2/Decisions")
files <- c("1.pdf", "2.pdf", "3.pdf", "4.pdf", "5.pdf", "6.pdf", "7.pdf", "8.pdf",
"9.pdf", "10.pdf", "11.pdf", "12.pdf", "13.pdf", "14.pdf", "15.pdf", "16.pdf")
#install.packages("pdftools")
library(pdftools)
pdfs <- lapply(files, pdf_text)
decisions <- Corpus(VectorSource(pdfs))
decisions <- tm_map(decisions, removePunctuation, lazy = TRUE)
decisions <- tm_map(decisions, tolower, lazy = TRUE)
decisions <- tm_map(decisions, tolower)
decisions <- tm_map(decisions, removeWords, stopwords("english"))
#decisions <- tm_map(decisions, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this",
#                                              "with", "without", "shall", "like", "thus", "that", "also", "will"))
decisions <- tm_map(decisions, stripWhitespace, lazy = TRUE)
#decisions <- tm_map(decisions, removeWords, c("the", "upon", "what", "and", "may", "can", "for", "this",
#                                              "with", "without", "shall", "like", "thus", "that", "also", "will"))
decisions <- tm_map(decisions, stripWhitespace)
decisionsPTD <- tm_map(decisions, PlainTextDocument)
dtm <- DocumentTermMatrix(decisionsPTD)
dtm <- DocumentTermMatrix(decisions)
highFreqTerm <- findFreqTerms(dtm, 25)
highFreqTerm <- findFreqTerms(dtm, 1)
highFreqTerm <- findFreqTerms(dtm, 25)
highFreqTerm
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
library("wordcloud")
set.seed(555)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
#install.packages("pdftools")
library("pdftools")
#install.packages("pdftools")
detach("pdftools")
#install.packages("pdftools")
detach(pdftools)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
rm(list = ls())
setwd("C:/Users/Eric/Documents/Penn College/CIT460/Assignment 2/Decisions")
files <- c("1.pdf", "2.pdf", "3.pdf", "4.pdf", "5.pdf", "6.pdf", "7.pdf", "8.pdf",
"9.pdf", "10.pdf", "11.pdf", "12.pdf", "13.pdf", "14.pdf", "15.pdf", "16.pdf")
#install.packages("pdftools")
library("pdftools")
pdfs <- lapply(files, pdf_text)
decisions <- Corpus(VectorSource(pdfs))
decisions <- tm_map(decisions, removePunctuation, lazy = TRUE)
decisions <- tm_map(decisions, tolower)
decisions <- tm_map(decisions, removeNumbers)
decisions <- tm_map(decisions, removeWords, stopwords("english"))
#decisions <- tm_map(decisions, removeWords, c())
decisions <- tm_map(decisions, stripWhitespace)
dtm <- DocumentTermMatrix(decisions)
freq <- sort(colSums(as.matrix(dtm)), decreasing = TRUE)
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
wordcloud(names(freq), freq, min.freq = 1, max.words = 200, colors = brewer.pal(8, "Dark2"))
barplot(freq[1:20], xlab = "Terms", ylab = "Frequency", col = heat.colors(20))
rm(list = ls())
a <- c("a", "b", "c")
b <- c("one", "two", "three")
c <- c("do", "re", "mi")
df <- data.frame(a, b, c)
v <- c("you", "me", "girl")
x <- vectorFrame(df, v)
vectorFrame <- function(df, v)
{
df <- rbind(df, data.frame(v))
return(df)
}
x <- vectorFrame(df, v)
summary(df)
summary(v)
x <- vectorFrame(df, v)
vectorFrame <- function(df, v)
{
df <- rbind(df, data.frame(asdf = v))
return(df)
}
x <- vectorFrame(df, v)
vectorFrame <- function(df, v)
{
df <- rbind(df, data.frame(df.asdf = v))
return(df)
}
x <- vectorFrame(df, v)
vectorFrame <- function(df, v)
{
df <- rbind(df, as.data.frame(t(v)))
return(df)
}
x <- vectorFrame(df, v)
vectorFrame <- function(df, v)
{
names(df) <- names(v)
df <- rbind(df, as.data.frame(t(v)))
return(df)
}
x <- vectorFrame(df, v)
vectorFrame <- function(df, v)
{
df <- rbind(df, as.data.frame(t(v)))
return(df)
}
x <- vectorFrame(df, v)
