spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
}
GetSentiment(files[3])
ve)
GetSentiment <- function(file)
{
fileName <- glue("C:\\Users\\Eric\\Documents\\Penn College\\CIT460\\SOTU Corpus")
fileName <- trimws(fileName)
fileText <- glue(read_file(fileName))
fileText <- gsub("\\$", "", fileText)
tokens <- data_frame(text = fileText) %>% unnest_tokens(word, text)
tokens %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
}
GetSentiment(files[3])
GetSentiment <- function(file)
{
fileName <- glue("C:\\Users\\Eric\\Documents\\Penn College\\CIT460\\SOTU Corpus")
fileName <- trimws(fileName)
fileText <- glue(read_file(fileName))
fileText <- gsub("\\$", "", fileText)
tokens <- data_frame(text = fileText) %>% unnest_tokens(word, text)
tokens %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
}
GetSentiment(files[3])
sentiments <- data_frame()
sentiments
GetSentiment <- function(file)
{
fileName <- glue("C:\\Users\\Eric\\Documents\\Penn College\\CIT460")
fileName <- glue("SOTU Corpus/", file, sep = "")
fileName <- trimws(fileName)
fileText <- glue(read_file(fileName))
fileText <- gsub("\\$", "", fileText)
tokens <- data_frame(text = fileText) %>% unnest_tokens(word, text)
tokens %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
}
GetSentiment(files[3])
setwd("../SOTU Corpus")
setwd("..")
GetSentiment <- function(file)
{
fileName <- glue("C:\\Users\\Eric\\Documents\\Penn College\\CIT460")
fileName <- glue("SOTU Corpus/", file, sep = "")
fileName <- trimws(fileName)
fileText <- glue(read_file(fileName))
fileText <- gsub("\\$", "", fileText)
tokens <- data_frame(text = fileText) %>% unnest_tokens(word, text)
tokens %>%
inner_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
}
GetSentiment(files[3])
bushSr <- sentiments %>%
filter(president == "Bush") %>%
filter(year < 2000) %>%
mutate(president = "Bush Sr.")
bushSr
for(i in files){
sentiments <- rbind(sentiments, GetSentiment(i))
}
# disambiguate Bush Sr. and George W. Bush
# correct president in applicable rows
bushSr <- sentiments %>%
filter(president == "Bush") %>% # get rows where the president is named "Bush"...
filter(year < 2000) %>% # ...and the year is before 200
mutate(president = "Bush Sr.") # and change "Bush" to "Bush Sr."
# remove incorrect rows
sentiments <- anti_join(sentiments, sentiments[sentiments$president == "Bush" & sentiments$year < 2000, ])
# add corrected rows to data_frame
sentiments <- full_join(sentiments, bushSr)
# plot of sentiment over time & automatically choose a method to model the change
ggplot(sentiments, aes(x = as.numeric(year), y = sentiment)) +
geom_point(aes(color = president))+ # add points to our plot, color-coded by president
geom_smooth(method = "auto") # pick a method & fit a model
# file to put our output in
sentiments <- data_frame()
# disambiguate Bush Sr. and George W. Bush
# correct president in applicable rows
bushSr <- sentiments %>%
filter(president == "Bush") %>% # get rows where the president is named "Bush"...
filter(year < 2000) %>% # ...and the year is before 200
mutate(president = "Bush Sr.") # and change "Bush" to "Bush Sr."
# remove incorrect rows
sentiments <- anti_join(sentiments, sentiments[sentiments$president == "Bush" & sentiments$year < 2000, ])
# add corrected rows to data_frame
sentiments <- full_join(sentiments, bushSr)
# plot of sentiment over time & automatically choose a method to model the change
ggplot(sentiments, aes(x = as.numeric(year), y = sentiment)) +
geom_point(aes(color = president))+ # add points to our plot, color-coded by president
geom_smooth(method = "auto") # pick a method & fit a model
# load in the libraries we'll need
library(tidyverse)
library(tidytext)
library(glue)
library(stringr)
# get a list of the files in the input directory
setwd("C:\\Users\\Eric\\Documents\\Penn College\\CIT460")
files <- list.files("C:\\Users\\Eric\\Documents\\Penn College\\CIT460")
# stick together the path to the file & 1st file name
fileName <- glue("SOTU Corpus/", files[1], sep = "")
# get rid of any sneaky trailing spaces
fileName <- trimws(fileName)
# read in the new file
fileText <- glue(read_file(fileName))
# remove any dollar signs (they're special characters in R)
fileText <- gsub("\\$", "", fileText)
# tokenize
tokens <- data_frame(text = fileText) %>% unnest_tokens(word, text)
# get the sentiment from the first text:
tokens %>%
inner_join(get_sentiments("bing")) %>% # pull out only sentiment words
count(sentiment) %>% # count the # of positive & negative words
spread(sentiment, n, fill = 0) %>% # made data wide rather than narrow
mutate(sentiment = positive - negative) # # of positive words - # of negative owrds
# write a function that takes the name of a file and returns the # of postive
# sentiment words, negative sentiment words, and the difference
GetSentiment <- function(file){
# get the file
fileName <- glue("SOTU Corpus/", file, sep = "")
# get rid of any sneaky trailing spaces
fileName <- trimws(fileName)
# read in the new file
fileText <- glue(read_file(fileName))
# remove any dollar signs (they're special characters in R)
fileText <- gsub("\\$", "", fileText)
# tokenize
tokens <- data_frame(text = fileText) %>% unnest_tokens(word, text)
# get the sentiment from the first text:
sentiment <- tokens %>%
inner_join(get_sentiments("bing")) %>% # pull out only sentimen words
count(sentiment) %>% # count the # of positive & negative words
spread(sentiment, n, fill = 0) %>% # made data wide rather than narrow
mutate(sentiment = positive - negative) %>% # # of positive words - # of negative owrds
mutate(file = file) %>% # add the name of our file
mutate(year = as.numeric(str_match(file, "\\d{4}"))) %>% # add the year
mutate(president = str_match(file, "(.*?)_")[2]) # add president
# return our sentiment dataframe
return(sentiment)
}
# test: should return
# negative  positive    sentiment   file    year    president
# 117   240 123 Bush_1989.txt   1989    Bush
GetSentiment(files[1])
# file to put our output in
sentiments <- data_frame()
# get the sentiments for each file in our datset
for(i in files){
sentiments <- rbind(sentiments, GetSentiment(i))
}
# disambiguate Bush Sr. and George W. Bush
# correct president in applicable rows
bushSr <- sentiments %>%
filter(president == "Bush") %>% # get rows where the president is named "Bush"...
filter(year < 2000) %>% # ...and the year is before 200
mutate(president = "Bush Sr.") # and change "Bush" to "Bush Sr."
# remove incorrect rows
sentiments <- anti_join(sentiments, sentiments[sentiments$president == "Bush" & sentiments$year < 2000, ])
# add corrected rows to data_frame
sentiments <- full_join(sentiments, bushSr)
# plot of sentiment over time & automatically choose a method to model the change
ggplot(sentiments, aes(x = as.numeric(year), y = sentiment)) +
geom_point(aes(color = president))+ # add points to our plot, color-coded by president
geom_smooth(method = "auto") # pick a method & fit a model
# load in the libraries we'll need
library(tidyverse)
library(tidytext)
library(glue)
library(stringr)
# get a list of the files in the input directory
setwd("C:\\Users\\Eric\\Documents\\Penn College\\CIT460\\SOTU Corpus")
files <- list.files("C:\\Users\\Eric\\Documents\\Penn College\\CIT460\\SOTU Corpus")
# stick together the path to the file & 1st file name
fileName <- glue("../SOTU Corpus/", files[1], sep = "")
# get rid of any sneaky trailing spaces
fileName <- trimws(fileName)
# read in the new file
fileText <- glue(read_file(fileName))
# remove any dollar signs (they're special characters in R)
fileText <- gsub("\\$", "", fileText)
# tokenize
tokens <- data_frame(text = fileText) %>% unnest_tokens(word, text)
# get the sentiment from the first text:
tokens %>%
inner_join(get_sentiments("bing")) %>% # pull out only sentiment words
count(sentiment) %>% # count the # of positive & negative words
spread(sentiment, n, fill = 0) %>% # made data wide rather than narrow
mutate(sentiment = positive - negative) # # of positive words - # of negative owrds
# write a function that takes the name of a file and returns the # of postive
# sentiment words, negative sentiment words, and the difference
GetSentiment <- function(file){
# get the file
fileName <- glue("../SOTU Corpus/", file, sep = "")
# get rid of any sneaky trailing spaces
fileName <- trimws(fileName)
# read in the new file
fileText <- glue(read_file(fileName))
# remove any dollar signs (they're special characters in R)
fileText <- gsub("\\$", "", fileText)
# tokenize
tokens <- data_frame(text = fileText) %>% unnest_tokens(word, text)
# get the sentiment from the first text:
sentiment <- tokens %>%
inner_join(get_sentiments("bing")) %>% # pull out only sentimen words
count(sentiment) %>% # count the # of positive & negative words
spread(sentiment, n, fill = 0) %>% # made data wide rather than narrow
mutate(sentiment = positive - negative) %>% # # of positive words - # of negative owrds
mutate(file = file) %>% # add the name of our file
mutate(year = as.numeric(str_match(file, "\\d{4}"))) %>% # add the year
mutate(president = str_match(file, "(.*?)_")[2]) # add president
# return our sentiment dataframe
return(sentiment)
}
# test: should return
# negative  positive    sentiment   file    year    president
# 117   240 123 Bush_1989.txt   1989    Bush
GetSentiment(files[1])
# file to put our output in
sentiments <- data_frame()
# get the sentiments for each file in our datset
for(i in files){
sentiments <- rbind(sentiments, GetSentiment(i))
}
# disambiguate Bush Sr. and George W. Bush
# correct president in applicable rows
bushSr <- sentiments %>%
filter(president == "Bush") %>% # get rows where the president is named "Bush"...
filter(year < 2000) %>% # ...and the year is before 200
mutate(president = "Bush Sr.") # and change "Bush" to "Bush Sr."
# remove incorrect rows
sentiments <- anti_join(sentiments, sentiments[sentiments$president == "Bush" & sentiments$year < 2000, ])
# add corrected rows to data_frame
sentiments <- full_join(sentiments, bushSr)
# plot of sentiment over time & automatically choose a method to model the change
ggplot(sentiments, aes(x = as.numeric(year), y = sentiment)) +
geom_point(aes(color = president))+ # add points to our plot, color-coded by president
geom_smooth(method = "auto") # pick a method & fit a model
# plot of sentiment by president
ggplot(sentiments, aes(x = president, y = sentiment, color = president)) +
geom_boxplot() # draw a boxplot for each president
# is the difference between parties significant?
# get democratic presidents & add party affiliation
democrats <- sentiments %>%
filter(president == c("Clinton","Obama")) %>%
mutate(party = "D")
# get democratic presidents & party add affiliation
republicans <- sentiments %>%
filter(president != "Clinton" & president != "Obama") %>%
mutate(party = "R")
# join both
byParty <- full_join(democrats, republicans)
# the difference between the parties is significant
t.test(democrats$sentiment, republicans$sentiment)
# plot sentiment by party
ggplot(byParty, aes(x = party, y = sentiment, color = party)) + geom_boxplot() + geom_point()
rm(list = ls())
# make three vectors and combine them as columns in a data.frame
sport <- c("Hockey", "Baseball", "Football")
league <- c("NHL", "MLB", "NFL")
trophy <- c("Stanley Cup", "Commissioner's Trophy",
+ "Vince Lombardi Trophy")
trophies1 <- cbind(sport, league, trophy)
# make another data.frame using data.frame()
trophies2 <- data.frame(sport=c("Basketball", "Golf"),
+ league=c("NBA", "PGA"),
+ trophy=c("Larry O'Brien Championship Trophy",
+ "Wanamaker Trophy"),
+ stringsAsFactors=FALSE)
# combine them into one data.frame with rbind
trophies <- rbind(trophies1, trophies2)
# make three vectors and combine them as columns in a data.frame
sport <- c("Hockey", "Baseball", "Football")
league <- c("NHL", "MLB", "NFL")
trophy <- c("Stanley Cup", "Commissioner's Trophy", + "Vince Lombardi Trophy")
trophies1 <- cbind(sport, league, trophy)
# make another data.frame using data.frame()
trophies2 <- data.frame(sport=c("Basketball", "Golf"),
+ league=c("NBA", "PGA"),
+ trophy=c("Larry O'Brien Championship Trophy", + "Wanamaker Trophy"),
+ stringsAsFactors=FALSE)
# combine them into one data.frame with rbind
trophies <- rbind(trophies1, trophies2)
# make three vectors and combine them as columns in a data.frame
sport <- c("Hockey", "Baseball", "Football")
league <- c("NHL", "MLB", "NFL")
trophy <- c("Stanley Cup", "Commissioner's Trophy", "Vince Lombardi Trophy")
trophies1 <- cbind(sport, league, trophy)
# make another data.frame using data.frame()
trophies2 <- data.frame(sport=c("Basketball", "Golf"),
+ league=c("NBA", "PGA"),
+ trophy=c("Larry O'Brien Championship Trophy", "Wanamaker Trophy"),
+ stringsAsFactors=FALSE)
# combine them into one data.frame with rbind
trophies <- rbind(trophies1, trophies2)
# make three vectors and combine them as columns in a data.frame
sport <- c("Hockey", "Baseball", "Football")
league <- c("NHL", "MLB", "NFL")
trophy <- c("Stanley Cup", "Commissioner's Trophy", "Vince Lombardi Trophy")
sport
trophies1 <- cbind(sport, league, trophy)
trophies1
# make another data.frame using data.frame()
trophies2 <- data.frame(sport=c("Basketball", "Golf"),
league=c("NBA", "PGA"),
trophy=c("Larry O'Brien Championship Trophy", "Wanamaker Trophy"),
stringsAsFactors=FALSE)
trophies2
cbind(Sport=sport, Association=league, Prize=trophy)
download.file(url="http://jaredlander.com/data/US_Foreign_Aid.zip",
destfile="data/ForeignAid.zip")
unzip("data/ForeignAid.zip", exdir="data")
#*****************   jooins
cd("..")
#*****************   jooins
setwd("..")
pwd()
download.file(url="http://jaredlander.com/data/US_Foreign_Aid.zip",
destfile="data/ForeignAid.zip")
unzip("data/ForeignAid.zip", exdir="data")
getwd()
library(stringr)
# first get a list of the files
theFiles <- dir("data/", pattern="\\.csv")
theFiles
for(a in theFiles)
{
# build a good name to assign to the data
nameToUse <- str_sub(string=a, start=12, end=18)
# read in the csv using read.table
# file.path is a convenient way to specify a folder and file name
temp <- read.table(file=file.path("data", a),
header=TRUE, sep=",", stringsAsFactors=FALSE)
# assign them into the workspace
assign(x=nameToUse, value=temp)
}
nameToUse
theFiles
Aid_10s
Aid90s00s <- merge(x=Aid_90s, y=Aid_00s,
by.x=c("Country.Name", "Program.Name"),
by.y=c("Country.Name", "Program.Name"))
head(Aid90s00s)
# first figure out the names of the data.frames
frameNames <- str_sub(string=theFiles, start=12, end=18)
# build an empty list
frameList <- vector("list", length(frameNames))
names(frameList) <- frameNames
# add each data.frame into the list
for(a in frameNames)
{
frameList[[a]] <- eval(parse(text=a))
}
head(frameList[[1]])
head(frameList[["Aid_00s"]])
head(frameList[[5]])
head(frameList[["Aid_60s"]])
allAid <- Reduce(function(...){
join(..., by=c("Country.Name", "Program.Name"))
},
frameList)
dim(allAid)
allAid <- Reduce(function(...){
join(..., by=c("Country.Name", "Program.Name"))
},
frameList)
dim(allAid)
allAid <- Reduce(function(...){
join(..., by=c("Country.Name", "Program.Name"))
},
frameList)
dim(allAid)
install.packages("plyr")
library(plyr)
allAid <- Reduce(function(...){
join(..., by=c("Country.Name", "Program.Name"))
},
frameList)
dim(allAid)
install.packages("useful")
library(useful)
corner(allAid, c=15)
bottomleft(allAid, c=15)
install.packages("data.table")
library(data.table)
dt90 <- data.table(Aid_90s, key=c("Country.Name", "Program.Name"))
dt00 <- data.table(Aid_00s, key=c("Country.Name", "Program.Name"))
dt0090 <- dt90[dt00]
dt0090
head(Aid_00s)
library(reshape2)
melt00 <- melt(Aid_00s, id.vars=c("Country.Name", "Program.Name"),
variable.name="Year", value.name="Dollars")
tail(melt00, 10)
library(scales)
# strip the "FY" out of the year column and convert it to numeric
melt00$Year <- as.numeric(str_sub(melt00$Year, start=3, 6))
# aggregate the data so we have yearly numbers by program
meltAgg <- aggregate(Dollars ~ Program.Name + Year, data=melt00,
sum, na.rm=TRUE)
# just keep the first 10 characters of program name
# then it will fit in the plot
meltAgg$Program.Name <- str_sub(meltAgg$Program.Name, start=1, end=10)
ggplot(meltAgg, aes(x=Year, y=Dollars)) +
geom_line(aes(group=Program.Name)) +
facet_wrap(~ Program.Name) +
scale_x_continuous(breaks=seq(from=2000, to=2009, by=2)) +
theme(axis.text.x=element_text(angle=90, vjust=1, hjust=0)) +
scale_y_continuous(labels=multiple_format(extra=dollar,
multiple="B"))
cast00 <- dcast(melt00, Country.Name + Program.Name ~ Year,
value.var="Dollars")
head(cast00)
getwd()
setwd("../airports")
getwd()
paste("Hello", "Jared", "and others")
paste("Hello", "Jared", "and others", sep="/")
paste(c("Hello", "Hey", "Howdy"), c("Jared", "Bob", "David"))
paste("Hello", c("Jared", "Bob", "David"))
paste("Hello", "Jared", "and others")
paste("Hello", "Jared", "and others", sep="/")
paste(c("Hello", "Hey", "Howdy"), c("Jared", "Bob", "David"))
paste("Hello", c("Jared", "Bob", "David"))
paste("Hello", c("Jared", "Bob", "David"), c("Goodbye", "Seeya"))
vectorOfText <- c("Hello", "Everyone", "out there", ".")
paste(vectorOfText, collapse=" ")
paste(vectorOfText, collapse="*")
person <- "Jared"
partySize <- "eight"
waitTime <- 25
paste("Hello ", person, ", your party of ", partySize, " will be seated in ", waitTime, " minutes.", sep="")
sprintf("Hello %s, your party of %s will be seated in %s minutes", person, partySize, waitTime)
sprintf("Hello %s, your party of %s will be seated in %s minutes",
+ c("Jared", "Bob"), c("eight", 16, "four", 10), waitTime)
paste("Hello", "Jared", "and others")
paste("Hello", "Jared", "and others", sep="/")
paste(c("Hello", "Hey", "Howdy"), c("Jared", "Bob", "David"))
paste("Hello", c("Jared", "Bob", "David"))
paste("Hello", c("Jared", "Bob", "David"), c("Goodbye", "Seeya"))
vectorOfText <- c("Hello", "Everyone", "out there", ".")
paste(vectorOfText, collapse=" ")
paste(vectorOfText, collapse="*")
person <- "Jared"
partySize <- "eight"
waitTime <- 25
paste("Hello ", person, ", your party of ", partySize, " will be seated in ", waitTime, " minutes.", sep="")
sprintf("Hello %s, your party of %s will be seated in %s minutes", person, partySize, waitTime)
sprintf("Hello %s, your party of %s will be seated in %s minutes", c("Jared", "Bob"), c("eight", 16, "four", 10), waitTime)
rm(list = ls())
DrugA <- (4, 5, 4, 3, 2, 4, 3, 4, 4)
DrugB <- (6, 8, 4, 5, 4, 6, 5, 8, 6)
DrugC <- (6, 7, 6, 6, 7, 5, 6, 5, 5)
data.frame(DrugA, DrugB, DrugC)
DrugA <- c(4, 5, 4, 3, 2, 4, 3, 4, 4)
DrugB <- c(6, 8, 4, 5, 4, 6, 5, 8, 6)
DrugC <- c(6, 7, 6, 6, 7, 5, 6, 5, 5)
data.frame(DrugA, DrugB, DrugC)
df <- data.frame(DrugA, DrugB, DrugC)
df
data.frame(c(DrugA, DrugB, DrugC), c(DrugA, DrugB, DrugC), c(DrugA, DrugB, DrugC))
data.frame(c(DrugA, DrugB, DrugC), c(rep("A", 9)), c(rep("B", 9)), c(rep("C", 9)))
data.frame(c(DrugA, DrugB, DrugC), c(rep("A", 9), rep("B", 9), rep("C", 9)))
pain <- c(DrugA, DrugB, DrugC)
df <- data.frame(c(DrugA, DrugB, DrugC), c(rep("A", 9), rep("B", 9), rep("C", 9)))
df
names(df) <- c("Pain", "Drug")
df
df.boxplot()
library("ggplot2")
ggplot(df) + geom_boxplot()
ggplot(df, aes(x="Drug")) + geom_boxplot()
boxplot(t(df))
ggplot(data = df) + geom_boxplot()
boxplot(df$Drug)
ggplot(df, x = Drug, y = Pain)
library("ggplot")
library("ggplot2")
ggplot(df, x = Drug, y = Pain)
boxplot(Pain~Drug, data = df)
boxplot(df)
boxplot(Pain~Drug, data = df, main = "Migraine Drug", xlab = "Drug", ylab = "Pain")
Drug.aov <- aov(Pain~Drug, data = df)
summary(Drug.aov)
TukeyHSD(drug.aov, conf.level = 0.95)
TukeyHSD(Drug.aov, conf.level = 0.95)
TukeyHSD(Drug.aov, conf.level = 0.95)
install.packages("shiny")
library("shiny")
install.packages("shiny")
install.packages("")
boxplot(Pain~Drug, data = df, main = "Migraine Drug", xlab = "Drug", ylab = "Pain")
install.packages("")
install.packages("shiny")
boxplot(Pain~Drug, data = df, main = "Migraine Drug", xlab = "Drug", ylab = "Pain")
R.version
updateR
updateR()
install.packages("installr")
