{
print ( counter )
counter <- counter - 1
}
counter <- 1
while ( counter < 5 )
{
print ( counter )
counter <- counter - 1
}
counter <- 1
while ( counter < 5 )
{
print ( counter )
counter <- counter + 1
}
for ( i in c( 4, 2, 1, 9, 8) )
{
print( i )
}
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in i:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
for ( i in 1:length(x) )
x <- rnorm( 1000 )
counter <- 0
for ( i in 1:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in 1:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
x <- rnorm( 1000 )
counter <- 0
for ( i in 1:length(x) )
{
if ( abs( x[i] ) < 1 )
counter <- counter + 1
}
print( counter / 1000 )
?seq
seq( 1, 10 )
seq( 2 , 30 , 7 )
s <- seq( 2 , 32 , 7 )
typeof( s )
class( s )
length( s )
rep( 5 , 3 )
rep( 6 , 3 )
l <- c( 4 , 3 , 2 , 7 , 6 , 4 )
l[2]
l[2:4]
l[c( 2 , 4 )]
l[-2]
l[-c( 2 , 4 )]
a <- c( 2 , 3 , 4 )
b <- c( 5 , 6 , 7 )
a + b
a <- c( 2 , 3 , 4 , 5 , 5 , 6 )
a + b
rep( 2:4 , 3 )
rep( 2:4 , each = 3 )
rep( 2:4 , each = 3 , length.out  8 )
rep( 2:4 , each = 3 , length.out = 8 )
rm( list = ls() )
f_to_k <- function( temp )
{
kelvin <-- ( temp - 32 ) * ( 5/9 ) + 273.15
return( kelvin )
}
f_to_k( 100 )
f_to_k( 35 )
f_to_k <- function( temp )
{
kelvin <- ( temp - 32 ) * ( 5/9 ) + 273.15
return( kelvin )
}
f_to_k( 35 )
foo <- function( par1 , par2 = 10 )
{
result <- par1 + par2
return( result )
}
foo( 20 )
foo( 1 )
foo( 2 , 3 )
apropos("mea")
apropos("\\[")
a
a <- c(1, 2, 3, NA, NA, 5, NA)
a
is.na(a)
mean(a)
mean(a, na.rm = T)
mean(a)
b <- c(1, 2, NULL, NULL, 5)
b
mean(b)
b[3] <- 4
b
library(magrittr)
c <- c(1, 2, 3, 5, 6, 9)
mean(c)
library(magrittr)
c | mean
c %>% mean
d <- c(1, 2, 3, NA, NA, 5, 6, NA, 9)
mean(d, na.rm = T)
d %>% is.na() %>% sum()
d %>% mean(na.rm=T)
rm(l = ls())
rm(ls())
rm(ls)
rm(asdf = ls)
rm(list = ls())
theDF <- data.frame(x, y, q)
x <- 10:1
y <- -4:5
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
theDF <- data.frame(x, y, q)
theDF
tempDF <- data.frame(1:5, 2:7)
tempDF <- data.frame(1:5, 2:6)
tempDF
nrow(theDF)
ncol(theDF)
dim(theDF)
names(theDF)
rownames(theDF)
colnames(theDF) <- ("First", "Second", "Sport")
colnames(theDF) <- ("First" "Second" "Sport")
colnames(theDF, "First", "Second", "Sport")
theDF.colnames("First", "Second", "Sport")
colnames(theDF) <- ("First", "Second", "Sport")
colnames(theDF) <- ("First" "Second" "Sport")
colnames(theDF) <- (c("First", "Second", "Sport"))
names(theDF)
head(theDF)
head(theDF, 2)
tail(theDF)
tail(theDF, 2)
theDF[,1]
theDF[1,]
theDF$Sport
summary(theDF)
theDF[1,1]
theDF[,c(1, 3)]
theDF[1:3, c(1,3)]
theDF[, "First"]
theDF[, c("First", "Sport")]
class(theDF["Sport"])
class(theDF[, "Sport"])
states <- c("PA", "NY", "NJ", "NY", "TN", "MA", "PA", "NY")
class(states)
typeof(states)
fs <- factor(states)
fs
summary(fs)
lst0 <- list(1, 2, 3)
lst0
lst1 <- list(c(1, 2, 3, 4))
lst1
lst <- list(c(1, 2, 3), 3:7)
lst
?matrix
rm(list = ls())
dimnames = list(c("row1", "row2"), c("C.1", "C.2", "C.3")))
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol=3, byrow = TRUE,
dimnames = list(c("row1", "row2"), c("C.1", "C.2", "C.3"))
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol=3, byrow = TRUE,
dimnames = list(c("row1", "row2"), c("C.1", "C.2", "C.3"))
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol=3, byrow = TRUE,
dimnames = list(c("row1", "row2"), c("C.1", "C.2", "C.3")))
mdat
A <- matrix(1:10, nrow = 5)
A
B <- matrix(1:10, nrow = 2)
B
nrow(A)
dim(A)
ncol(A)
E <- matrix(1:6, nrow = 2)
E
F <- matrix(11:16, nrow = 2)
F
E + F
E - F
E * F
E / F
E == F
t(F)
mdArray <- array(1:12, dim = c(2, 3, 2))
?array
mdArray
mdArray[, 2,]
mdArray[1, , 1]
rm(list = ls()
)
a <- c(1, 1, 1, 0, 1)
ifelse(a == 1, a * 3, a + 1)
replicate(3, 10)
rep(3, 10)
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
m
m <- matrix(c(1:20), nrow = 10, ncol = 2)
m
apply(m, 1, mean)
apply(x, 1, sum)
apply(m, 1, sum)
apply(m, 1, function(x, y) x * y)
apply(m, 1, function(x) x * y)
apply(m, 1, function(x, y = "3") x * y)
apply(m, 1, function(x, y = 3) x * y)
apply(m, 1, function(x) x * x)
apply(m, 1, function(x) mean(x))
apply(m, 1, function(x) x[1] * x[2])
apply(m, c(1,2), function(x) x*x)
apply(m, 2, mean)
e <- new.env()
e$a <- 1:10
View(e)
e$b <- rnorm(10)
eapply(e, mean)
View(e)
c <- list(c(2, 3, 4), c(8, 9, 9, 9))
class(c)
c
l <- lapply(c, mean)
class(l)
l
l <- list(a = 1:10, b = 11:20)
sapply(l, mean)
class(sapply(l, mean))
typeof(sapply(l, mean))
meansapply(l, mean)
sapply(l, mean)
l <- list(a = 1:10, b = 11:20)
l.fivenum <- vapply(l, fivenum, c("1st Qu." = 0, Min. = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
l.fivenum
replicate(3, "Banana")
rnorm(5)
replicate(3, rnorm(5))
class(replicate(3, "Banana"))
l <- list(a = 1:10, b = 11:20)
rapply(l, function(x) x*x)
rapply(l, function(x) x*x, how = "list")
attach(iris)
head(iris, 4)
by(iris[, 1:4], Species, colMeans)
iris
e <- new.env()
e$a <- 1:10
e$b <- rnorm(10)
eapply(e, mean)
l <- lapply(c, mean)
l
class(l)
l <- list(a = 1:10, b=11:20)
sapply(l, mean)
class(sapply(l, mean))
typeof(sapply(l, mean))
tapply(iris$Petal.Length, Species, mean)
by(iris$Petal.Length, Species, mean)
tapply(iris$Petal.Length, Species, mean)
res2 <-
res1 <- tapply(iris$Petal.Length, Species, mean)
res2 <- by(iris$Petal.Length, Species, mean)
class(res1)
class(res2)
typeof(res1)
typeof(res2)
theMatrix <- matrix(1:9, nrow = 3)
theMatrix
apply(theMatrix, 1, sum)
apply(theMatrix, 2, sum)
rowSums(theMatrix)
colSums(theMatrix)
theMatrix[2,1] <- NA
theMatrix
apply(theMatrix, 1, sum)
apply(theMatrix, 1, sum, na.rm = T)
rowSums(theMatrix, na.rm = T)
theList <- list(A = matrix(1:9, 3), B = 1:5, c = matrix(1:4, 2), D = 2)
theList
lapply(theList, sum)
sapply(theList, sum)
theNames <- ("Jared", "Deb", "Paul")
theNames <- c("Jared", "Deb", "Paul")
theNames
lapply(theNames, nchar)
res <- sapply(theNames, nchar)
res$Jared
res[1]
firstList <- list(A = matrix(1:16, 4), B = matrix(1:16, 2), c = 1:5)
secondList <- list(A = matrix(1:16, 4), B = matrix(1:16, 8), c = 15:1)
mapply(identical, firstList, secondList)
mapply(identical, firstList, secondList, thirdList)
thirdList <- list(A = matrix(1:16, 4), B = matrix(1:16, 8), C = 1:5)
mapply(identical, firstList, secondList, thirdList)
secondList <- list(A = matrix(1:16, 4), B = matrix(1:16, 8))
mapply(identical, firstList, secondList)
mapply(identical, firstList, secondList, thirdList)
, c = 15:1
secondList <- list(A = matrix(1:16, 4), B = matrix(1:16, 8), c = 15:1)
mapply(identical, firstList, secondList)
mapply(identical, firstList, secondList, thirdList)
a <- c(2, 3, 4, 5)
a <- c(2, 3, 2, 5)
b <- c(2, 7)
mapply(identical, a, b)
simpleFunc <- function(x, y)
{
NROW(x) + NROW(y)
}
mapply(simpleFunc, firstList, secondList)
data(diamonds, package = "ggplot2")
head(diamonds, 3)
data(diamonds)
attach("ggplot2")
attach(ggplot2)
install.packages("ggplot2")
data(diamonds, package = "ggplot2")
head(diamonds, 3)
data(diamonds)
library("ggplot2")
data(diamonds, package = "ggplot2")
head(diamonds, 3)
data(diamonds)
data(diamonds)
aggregate(price-cut, diamonds, mean)
aggregate(price~cut, diamonds, mean)
aggregate(price~cut + color, diamonds, mean)
aggregate(price~color + cut, diamonds, mean)
aggregate(price~cut, diamonds, mean)
aggregate(carat~cut, diamonds, mean)
aggregate(cbind(price, carat) ~ cut, diamonds, mean)
aggregate(cbind(price, carat) + cut, diamonds, mean)
aggregate(cbind(price + carat) ~ cut, diamonds, mean)
aggregate(cbind(price + carat) ~ cut, diamonds, mean)   # added them... bad
aggregate(cbind(price, carat) ~ color + cut, diamonds, mean))
aggregate(cbind(price, carat) ~ color + cut, diamonds, mean)
aggregate(price, carat) ~ cut + color, diamonds, mean)
aggregate(cbind(price, carat) ~ cut + color, diamonds, mean)
library(plyr)
head(baseball, 5)
baseball
?plyr
baseball$sf[baseball$year < 1954] <- 0    # SF was not kept
any(is.na(baseball$sf))
baseball$ab
baseball50 <- baseball[baseball$ab >= 50, ]
baseball$OBP <- with(baseball, (h + bb + hbp) / (ab + bb + hbp + sf))
tail(baseball)
obp <- function(data)
{
c(OBP = with(data, sum(h + bb + hbp) / sum(ab + bb + hbp + sf)))
}
install.packages(c("tm", "RCurl", "SnowballC"))
library("tm")
library("RCurl")
library("SnowballC")
?Corpus
setwd("C:\Users\Eric\Documents\Penn College\CIT460")
setwd("C:\\Users\Eric\Documents\Penn College\CIT460")
setwd("C:/Users/Eric/Documents/Penn College/CIT460")
dir.create("data")
dir.create("text mining")
setwd("text mining")
dir.create("data")
setwd("data")
url <- "https://raw.githubusercontent.com/angerhang/statsTutorial/master/src/textMining/data/1.txt"
write(getURL(), file = "1.txt")
write(getURL(url), file = "1.txt")
url <- "https://raw.githubusercontent.com/angerhang/statsTutorial/master/src/textMining/data/2.txt"
write(getURL(url), file = "2.txt")
url <- "https://raw.githubusercontent.com/angerhang/statsTutorial/master/src/textMining/data/3.txt"
write(getURL(url), file = "3.txt")
setwd("..")
getwd()
shakespeare <- VCorpus(DirSource("data", encoding  "UTF-8"))
shakespeare <- VCorpus(DirSource("data", encoding = "UTF-8"))
writeCorpus(shakespeare)
meta(shakespeare)
meta
shakespeare[1]
shakespeare[2]
shakespeare[3]
shakespeare[[1]]
summary(shakespeare)
shakespeare <- tm_map(shakespeare, stripwhitespace, lazy = TRUE)
writeCorpus(shakespeare)
writeCorpus(shakespeare)
shakespeare <- tm_map(shakespeare, stripwhitespace, lazy = TRUE)
writeCorpus(shakespeare)
writeCorpus(shakespeare)
shakespeare <- tm_map(shakespeare, stemDocument, lazy = TRUE)
shakespeare <- tm_map(shakespeare, removePunctuation, lazy = TRUE)
stopwords()
stopwords("french")
shakespeare <- tm_map(shakespeare, stopwords, lazy = TRUE)
shakespeare <- tm_map(shakespeare, stopwords("the"), lazy = TRUE)
other.words <- c("the", "up", "it")
shakespeare <- tm_map(shakespeare, stopwords(other.words), lazy = TRUE)
shakespeare <- tm_map(shakespeare, content_transformer(tolower), lazy = TRUE)
dtm <- DocumentTermMatrix(shakespeare)
setwd("C:/Users/Eric/Documents/Penn College/CIT460")
dir.create("text mining")
setwd("text mining")
dir.create("data")
setwd("data")
url <- "https://raw.githubusercontent.com/angerhang/statsTutorial/master/src/textMining/data/1.txt"
write(getURL(url), file = "1.txt")
url <- "https://raw.githubusercontent.com/angerhang/statsTutorial/master/src/textMining/data/2.txt"
write(getURL(url), file = "2.txt")
url <- "https://raw.githubusercontent.com/angerhang/statsTutorial/master/src/textMining/data/3.txt"
write(getURL(url), file = "3.txt")
setwd("..")
getwd()
shakespeare <- VCorpus(DirSource("data", encoding = "UTF-8"))
writeCorpus(shakespeare)
meta(shakespeare)
shakespeare[1]
shakespeare[[1]]
summary(shakespeare)
shakespeare <- tm_map(shakespeare, stripwhitespace, lazy = TRUE)
writeCorpus(shakespeare)
shakespeare <- tm_map(shakespeare, stemDocument, lazy = TRUE)
shakespeare <- tm_map(shakespeare, removePunctuation, lazy = TRUE)
shakespeare <- tm_map(shakespeare, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(shakespeare)
highFreqTerm <- findFreqTerms(dtm, 25)
library("wordcloud")
packages.install("wordcloud")
install.packages("wordcloud")
library("wordcloud")
